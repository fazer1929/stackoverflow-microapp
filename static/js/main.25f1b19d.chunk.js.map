{"version":3,"sources":["Components/ModalContent/ModalContent.module.css","Components/Home/Home.module.css","logo.svg","Components/Cards/Card.module.css","Components/Cards/Card.js","StateProvider.js","Components/ModalContent/ModalContent.js","Components/Home/Home.js","apiQuery.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["module","exports","Card","lastQuestion","id","title","link","tags","ownerName","profileImage","useState","onClick","className","styles","cardContainer","cardAvatar","cardAvatarImage","src","alt","cardAuthor","cardContent","cardHeading","cardContentTags","map","tag","i","key","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","ModalContent","itemId","onClose","items","item","container","cross","mainContent","modalHeader","modalImage","userName","modalContent","modalTitle","bodyTags","href","target","buttonLink","buttonClose","Home","pageNumber","isModalVisible","setIsModalVisible","setId","loading","setLoading","dispatch","useEffect","fetch","then","res","json","result","type","useApiQuery","closeModal","ida","mainContainer","isOpen","onRequestClose","App","Boolean","window","location","hostname","match","state","action","page","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25f1b19d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"ModalContent_mainContent__1358S\",\"modalImage\":\"ModalContent_modalImage__2irn2\",\"userName\":\"ModalContent_userName__3t9_Z\",\"buttonLink\":\"ModalContent_buttonLink__2AuRj\",\"buttonClose\":\"ModalContent_buttonClose__1FAi9\",\"modalContent\":\"ModalContent_modalContent__1WiLs\",\"modalTitle\":\"ModalContent_modalTitle__2fk8F\",\"button\":\"ModalContent_button__1iuLI\",\"cross\":\"ModalContent_cross__1EErz\",\"tags\":\"ModalContent_tags__hVxCG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Home_mainContainer__a6zJP\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"Card_cardContainer__SGcxD\",\"cardAvatar\":\"Card_cardAvatar__1fLGq\",\"cardAuthor\":\"Card_cardAuthor__177W6\",\"cardAvatarImage\":\"Card_cardAvatarImage__26T_v\",\"cardContent\":\"Card_cardContent__Tc_GB\",\"cardHeading\":\"Card_cardHeading__2tBnY\",\"cardContentTags\":\"Card_cardContentTags__1l9EG\",\"tag\":\"Card_tag__2wIZG\"};","import React, { useState } from 'react'\r\nimport styles from './Card.module.css'\r\n\r\nfunction Card({lastQuestion,id,link,title,tags,ownerName,profileImage}) {\r\n    const [pageNumber,setPageNumber] = useState(1)\r\n\r\n    const handleModal = () => {\r\n       console.log(lastQuestion)\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => lastQuestion(id)} className={styles.cardContainer}>\r\n            <div className = {styles.cardAvatar}>\r\n                <img className={styles.cardAvatarImage} src={profileImage} alt=\"User Avatar\"/>\r\n                <div className={styles.cardAuthor}>{ownerName} </div>\r\n            </div>\r\n            <div className={styles.cardContent}>\r\n                <h3 className={styles.cardHeading}>Q. {title}</h3>\r\n                <div className={styles.cardContentTags}>\r\n                    {tags?.map((tag,i) => <span key={i} className={styles.tag}>{tag}</span>)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React, {createContext , useContext ,useReducer} from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\n//Wrap app and provide data layer\r\nexport const StateProvider = ({reducer , initialState, children}) => (\r\n    <StateContext.Provider value={useReducer(reducer,initialState)} >\r\n    {children}\r\n    </StateContext.Provider>\r\n    );\r\n\r\n    //pull info from data layer\r\nexport const useStateValue = () => useContext(StateContext);","import React from 'react'\r\nimport styles from './ModalContent.module.css'\r\nimport {useStateValue} from '../../StateProvider'\r\nfunction ModalContent({itemId,onClose}) {\r\n    const[{items},dispatch] = useStateValue();\r\n    const item = items[itemId];\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.cross} onClick={onClose}>X</div>\r\n            <div className={styles.mainContent}>\r\n                <div className={styles.modalHeader}>\r\n                    <img className={styles.modalImage} src={item[\"owner\"][\"profile_image\"]} />\r\n                <div className={styles.userName}>{item[\"owner\"][\"display_name\"]}</div>\r\n                </div>\r\n\r\n                <div className={styles.modalContent}>\r\n                    <div className={styles.modalTitle}>Q. {item[\"title\"]}</div>\r\n                    <div className={styles.tags}><span className={styles.bodyTags}>Tags : </span>{item[\"tags\"]?.map((tag,i) => <span key={i} className={styles.tag}>{tag}</span>)}</div>\r\n                    <div className={styles.tags}> <span className={styles.bodyTags}>Answer Count : </span> {item[\"answer_count\"]}</div>\r\n                    <div className={styles.tags}><span className={styles.bodyTags}>View Count : </span>{item[\"view_count\"]}</div>   \r\n                </div>\r\n            <a href={item[\"link\"]} target=\"_blank\"> <button className={styles.buttonLink}>See the question</button> </a>\r\n            <button className={styles.buttonClose} onClick={onClose}>Close</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalContent\r\n","import React,{useState} from 'react'\r\nimport Card from '../Cards/Card'\r\nimport styles from './Home.module.css'\r\nimport useApiQuery from '../../apiQuery'\r\nimport Modal from 'react-modal'\r\nimport ModalContent from '../ModalContent/ModalContent'\r\nimport {useStateValue} from '../../StateProvider'\r\n\r\nfunction Home() {\r\n    const[{items},dispatch] = useStateValue();\r\n    const[pageNumber,setPageNumber] = useState(1)\r\n    const[isModalVisible,setIsModalVisible]  = useState(false);\r\n    const[id,setId] = useState(0);\r\n \r\n    let{loading} = useApiQuery(pageNumber);\r\n    const closeModal = ()=>{\r\n        setIsModalVisible(false)\r\n    }\r\n    const lastQuestion = (ida) =>{\r\n        setIsModalVisible(true)\r\n        setId(ida);\r\n    }\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            {items?.map((item,i) =>{ \r\n                return(\r\n                        <Card\r\n                            id={i}\r\n                            lastQuestion={lastQuestion}\r\n                            key={i}\r\n                            link = {item.link}\r\n                            title = {item.title}\r\n                            tags= {item.tags}\r\n                            ownerName = {item[\"owner\"][\"display_name\"]}\r\n                            profileImage = {item[\"owner\"][\"profile_image\"]}\r\n                        />\r\n                    )\r\n                \r\n        }\r\n            )}\r\n        \r\n        <Modal isOpen={isModalVisible} onRequestClose={closeModal}>\r\n            <ModalContent itemId={id} onClose={closeModal} />\r\n        </Modal>\r\n            \r\n        {loading?<h3>Loading....</h3>:\"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React,{useEffect,useState} from 'react'\r\nimport { useStateValue } from './StateProvider'\r\nexport default function useApiQuery(pageNumber) {\r\n    const[loading,setLoading] = useState(false);\r\n    const[{items},dispatch] = useStateValue();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n    setLoading(true)\r\n    fetch(`https://api.stackexchange.com/2.2/questions?page=${pageNumber}&pagesize=30&order=desc&sort=hot&site=stackoverflow`)\r\n    .then(res =>res.json())\r\n    .then(result => {\r\n        // setItems(result.items)\r\n        dispatch({\r\n            type:\"ADD_ITEMS\",\r\n            item:[...result.items],\r\n        });\r\n        setLoading(false)\r\n    })\r\n    },[pageNumber])\r\n    return {loading};\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './Components/Home/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Home/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const initialState = {\r\n    items:[], \r\n    page:1,\r\n};\r\n\r\n\r\nconst reducer = (state, action) => {\r\n\r\n    switch(action.type) {\r\n        case 'ADD_ITEMS':\r\n            return {\r\n                ...state,\r\n                items: [...state.items, ...action.item]\r\n            };\r\n\r\n        case 'CHNAGE_PAGE':\r\n            return{\r\n                ...state,\r\n                page:action.page\r\n            }\r\n        default:\r\n            return  state\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport reducer,{initialState} from './reducer'\r\nimport {StateProvider} from './StateProvider'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider reducer={reducer}  initialState={initialState} > \r\n    <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}